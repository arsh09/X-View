#include <x_view_core/features/graph.h>
#include <x_view_core/matchers/graph_matcher/random_walker.h>

#ifndef X_VIEW_TEST_RANDOM_WALK_H
#define X_VIEW_TEST_RANDOM_WALK_H

namespace x_view_test {

/**
 * \brief Tests the validity of the random walks generated by the
 * RandomWalker class by checking if an edge exists between each consecutive
 * pair of vertices contained in the random walk.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the random walks.
 */
void testRandomWalkSequence(const x_view::RandomWalker& random_walker,
                            const x_view::Graph& graph,
                            const x_view::RandomWalkerParams& params);

/**
 * \brief Tests the avoiding strategy, i.e. it verifies that two consecutive
 * nodes in a random walk never have equal label except for the case when a
 * node has only neighbors with same label.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the random walks.
 */
void testAvoidingStrategy(const x_view::RandomWalker& random_walker,
                          const x_view::Graph& graph,
                          const x_view::RandomWalkerParams& params);

/**
 * \brief Tests the non-returning strategy, i.e. it verifies that each
 * generated random walk does not present any subwalk of the form 'A-B-A'
 * except for the case when vertex 'B' has a single neighbor.
 * \param random_walker RandomWalker instance to be tested.
 * \param graph Graph to be tested.
 * \param params Parameters to be used by the RandomWalker class to generate
 * the random walks.
 * \note This function assumes that the 'index' property associated to the
 * vertices of the graph passed as argument correspond to the associated
 * vertex descriptor, i.e:
 * \code{.cpp}
 * auto v_p = graph[index];
 * assert(v_p.index == index);
 * \endcode
 */
void testNonReturningStrategy(const x_view::RandomWalker& random_walker,
                              const x_view::Graph& graph,
                              const x_view::RandomWalkerParams& params);

/**
 * \brief Tests the statistics related to the random walks generated by the
 * 'WEIGHTED' random walk sampling strategy.
 * \details Given three vertices in sequence A--B--C with edge A--B having
 * weight W1 and edge B--C having weight W2. This test verifies that the
 * number of random walks N1 starting at B heading towards vertex A and the
 * number of random walks N2 starting at B heading towards vertex C, form a
 * ratio determined by the weights W1 and W2. Namely the expected ratio
 * tested by this routine is that W1 / W2 = N1 / N2.
 */
void testWeightedStrategyStatistics();

}

#endif //X_VIEW_TEST_RANDOM_WALK_H
